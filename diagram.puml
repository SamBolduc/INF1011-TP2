skinparam linetype ortho

abstract class AbstractMembre {
- string nom
- string adresse
- Date dateAdhésion
- string codeCarteAdhésion
}

class MembreParticulier {
- Date dateDeNaissance
- string numCarteIdentite
}

class MembreEntreprise {
- string numEntreprise
- string numRegistre
}

class RegistreEmploye{
  + void AjouterEmployé(infos, PointDeVente)
  + void ModifierEmployé(Employé, infos)
  + void SupprimerEmployé(Employé)
  + Employé GetEmployéById(idEmployé)
}

interface IVisitable {
+void accept(IVisitor)
}

interface IVisitor {
    +visitTransaction(Transaction)
    +visitPointDeVente(PointDeVente)
}

IVisitor -> PointDeVente
IVisitor -> Transaction
class ReportVisitor implements IVisitor {
    -int pointDeVenteCount
    -int transactionCount
}


class Employé {
- string nomComplet
- Date debutEmploi
}

class SousDirecteur {

}

class Directeur {

}

class Transaction implements IVisitable {
- int id
- AbstractMembre acheteur
- Date date
- Number prixTotal
- List<ISubscriber> subscribers
+ Number getPrixTotal()
+ AbstractMembre getAcheteur()
+ void AjouterArticle(Article)
+ void ModifierArticle(Article, infos)
+ void SupprimerArticle(Article)
+ void ProcéderPaiement()
+ void AjouterSubscriber(ISubscriber)
+ void EnleverSubscriber(ISubscriber)
+ void NotifierSubscribers()
}

class Article {
  - string SKU
  - string description
  - Number prix
  - string taille
  - Map<PointDeVente,int> quantiteLocalisation
}

class RegistreTransaction {
- List<Transaction> transactions
+ Transaction getTransactionById(idTransaction)
+ void NouvelleTransaction(AbstractMembre)
+ void AnnulerTransaction(Transaction)
+ void SupprimerTransaction(Transaction)
+ void ArchiverTransaction(Transaction)
+ void ArchiverJournée()
+ void GénérerReçu(Transaction)
}

enum StatutTransaction{
PAYÉ
ATTENTE_PAIEMENT
}

class Entreprise {
- string nom
- string numEntreprise
- string numRegistre
- List<AbstractMembre> membres
- List<PointDeVente> pointDeVentes
+ AbstractMembre getMembreById(idMembre)
+ void AjouterNouveauMembre(infos)
+ void ModifierMembre(AbstractMembre, infos)
+ void SupprimerMembre(AbstractMembre)
+ void ActiverMembre(AbstractMembre)
+ void DésactiverMembre(AbstractMembre)
+ void AjouterPointDeVente(SousDirecteur)
+ void ModifierPointDeVente(PointDeVente, infos)
+ void SupprimerPointDeVente()

}

class PointDeVente implements IVisitable{
  - string id
  - string adresse
  + void ChangerSousDirecteur(SousDirecteur)
  + double GetTaxes()
  + boolean VérifierCarteMembre(codeCarteAdhésion)
  + void FaireRemboursement(idTransaction)
}

interface InventaireAdapter {
  +Article GetArticleBySKU(string)
  +ReduireInventaire(Article,Quantite,PointDeVente)
}


class Inventaire

interface ISubscriber {
+ notifier(Transaction)
}

class ReçuListener implements ISubscriber {
+ notifier(Transaction) 
}

class ArchivageListener implements ISubscriber {
+ notifier(Transaction) 
}

Inventaire ..|> InventaireAdapter

abstract class Paiement {}

class PaiementCredit {}

class PaiementCash {}

class PaiementCheque {}

Employé <|-- SousDirecteur
SousDirecteur <|-- Directeur

Paiement <|-- PaiementCredit
Paiement <|-- PaiementCash
Paiement <|-- PaiementCheque

Entreprise *-- PointDeVente
PointDeVente *-- RegistreEmploye
Entreprise *-- InventaireAdapter
InventaireAdapter --> Article
Entreprise *-- Directeur
PointDeVente *-- SousDirecteur
RegistreEmploye *-- Employé
PointDeVente *-- RegistreTransaction

RegistreTransaction *-- Transaction
Transaction <-- StatutTransaction
Transaction *-- Paiement
Transaction o- Article

AbstractMembre --* Entreprise
MembreParticulier<|-- AbstractMembre
MembreEntreprise <|-- AbstractMembre

Transaction o- ISubscriber
RegistreTransaction <.. ISubscriber
